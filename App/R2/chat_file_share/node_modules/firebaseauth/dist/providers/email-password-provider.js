"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
}
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
}
Object.defineProperty(exports, "__esModule", { value: true });
const utils = __importStar(require("../core/utils"));
const endpoints_1 = __importDefault(require("../core/endpoints"));
const validator = __importStar(require("validator"));
const account_1 = require("../user/account");
const firebase_user_1 = require("../models/firebase-user");
function register(apiKey, email, password, ...more) {
    let extras, callback;
    //search for callback function first
    if (more.length === 1) {
        callback = more[0];
    }
    else if (more.length === 2) {
        extras = more[0];
        callback = more[1];
    }
    if (typeof (callback) !== 'function') {
        throw new Error('No valid callback function defined');
    }
    if (!validator.isEmail(email)) {
        callback(utils.invalidArgumentError('Email'));
        return;
    }
    if (!validator.isLength(password, { min: 6 })) {
        callback(utils.invalidArgumentError('Password. Password must be at least 6 characters'));
        return;
    }
    let name, photoUrl, requestVerification;
    if (extras) {
        const typeOfExtras = typeof (extras);
        if (typeOfExtras === 'string') {
            name = extras;
        }
        else if (typeOfExtras === 'object') {
            name = extras.name;
            photoUrl = extras.photoUrl;
            requestVerification = extras.requestVerification;
        }
        else {
            callback(utils.invalidArgumentError('Extras. Expected an object, found a ' + typeOfExtras));
            return;
        }
    }
    if (name && !validator.isLength(name, { min: 2 })) {
        callback(utils.invalidArgumentError('Name'));
        return;
    }
    if (photoUrl && !validator.isURL(photoUrl)) {
        callback(utils.invalidArgumentError('Photo Url. Not a valid URL'));
        return;
    }
    if (requestVerification && typeof (requestVerification) !== 'boolean') {
        callback(utils.invalidArgumentError('requestVerification'));
        return;
    }
    const payload = {
        email: email,
        password: password,
        returnSecureToken: true
    };
    const registerEndpoint = endpoints_1.default.urls(apiKey).signUpUrl;
    endpoints_1.default.post(registerEndpoint, payload)
        .then((userInfo) => {
        // get token and other basic auth info
        const authResult = utils.processFirebaseAuthResult(userInfo);
        // to send verification email?
        if (requestVerification === true) {
            sendVerificationEmail(apiKey, authResult.token, () => completeRegistration(apiKey, name, photoUrl, authResult, callback));
        }
        else {
            completeRegistration(apiKey, name, photoUrl, authResult, callback);
        }
    })
        .catch((err) => callback(utils.processFirebaseError(err)));
}
exports.register = register;
function completeRegistration(apiKey, name, photoUrl, authResult, callback) {
    if (name || photoUrl) {
        // save name as well before returning to caller
        account_1.updateProfile(apiKey, authResult.token, name, photoUrl, (err, user) => {
            authResult.user = user;
            callback(err, authResult); //will return error as well if the profile update failed
        });
    }
    else {
        // no extra info to update
        callback(null, authResult);
    }
}
function signIn(apiKey, email, password, callback) {
    if (!validator.isEmail(email)) {
        callback(utils.invalidArgumentError('Email'));
        return;
    }
    if (!validator.isLength(password, { min: 6 })) {
        callback(utils.invalidArgumentError('Password. Password must be at least 6 characters'));
        return;
    }
    const payload = {
        email: email,
        password: password,
        returnSecureToken: true
    };
    endpoints_1.default.post(endpoints_1.default.urls(apiKey).signInUrl, payload)
        .then((userInfo) => callback(null, utils.processFirebaseAuthResult(userInfo)))
        .catch((err) => callback(utils.processFirebaseError(err)));
}
exports.signIn = signIn;
function sendVerificationEmail(apiKey, token, callback) {
    if (token.trim().length === 0) {
        callback(utils.invalidArgumentError('Token'));
        return;
    }
    const payload = {
        idToken: token,
        requestType: "VERIFY_EMAIL"
    };
    endpoints_1.default.post(endpoints_1.default.urls(apiKey).sendVerificationEmailUrl, payload)
        .then(() => callback(null, { status: "success" }))
        .catch((err) => callback(utils.processFirebaseError(err)));
}
exports.sendVerificationEmail = sendVerificationEmail;
function verifyEmail(apiKey, oobCode, callback) {
    const payload = { oobCode: oobCode };
    endpoints_1.default.post(endpoints_1.default.urls(apiKey).verifyEmailUrl, payload)
        .then((userInfo) => callback(null, new firebase_user_1.FirebaseUser(userInfo)))
        .catch((err) => callback(utils.processFirebaseError(err)));
}
exports.verifyEmail = verifyEmail;
function sendPasswordResetEmail(apiKey, email, callback) {
    if (!validator.isEmail(email)) {
        callback(utils.invalidArgumentError('Email'));
        return;
    }
    const payload = {
        email: email,
        requestType: "PASSWORD_RESET"
    };
    endpoints_1.default.post(endpoints_1.default.urls(apiKey).sendPasswordResetEmailUrl, payload)
        .then(() => callback(null, { status: "success" }))
        .catch((err) => callback(utils.processFirebaseError(err)));
}
exports.sendPasswordResetEmail = sendPasswordResetEmail;
function verifyPasswordResetCode(apiKey, oobCode, callback) {
    if (typeof (oobCode) !== 'string') {
        callback(utils.invalidArgumentError('oobCode'));
        return;
    }
    endpoints_1.default.post(endpoints_1.default.urls(apiKey).verifyPasswordResetcodeUrl, { oobCode: oobCode })
        .then(() => callback(null, { verified: true }))
        .catch((err) => callback(utils.processFirebaseError(err)));
}
exports.verifyPasswordResetCode = verifyPasswordResetCode;
function resetPassword(apiKey, oobCode, newPassword, callback) {
    if (!validator.isLength(newPassword, { min: 6 })) {
        callback(utils.invalidArgumentError('Password. Password must be at least 6 characters'));
        return;
    }
    const payload = {
        oobCode: oobCode,
        newPassword: newPassword
    };
    endpoints_1.default.post(endpoints_1.default.urls(apiKey).resetPasswordUrl, payload)
        .then(() => callback(null, { status: "success" }))
        .catch((err) => callback(utils.processFirebaseError(err)));
}
exports.resetPassword = resetPassword;
function changePassword(apiKey, token, password, callback) {
    const payload = {
        password: password,
        idToken: token,
        returnSecureToken: true
    };
    if (!validator.isLength(password, { min: 6 })) {
        callback(utils.invalidArgumentError('Password. Password must be at least 6 characters'));
        return;
    }
    endpoints_1.default.post(endpoints_1.default.urls(apiKey).changePasswordUrl, payload)
        .then((userInfo) => callback(null, utils.processFirebaseAuthResult(userInfo)))
        .catch((err) => callback(utils.processFirebaseError(err)));
}
exports.changePassword = changePassword;
//# sourceMappingURL=email-password-provider.js.map