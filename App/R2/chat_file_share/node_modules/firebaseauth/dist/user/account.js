"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
}
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
}
Object.defineProperty(exports, "__esModule", { value: true });
const utils = __importStar(require("../core/utils"));
const endpoints_1 = __importDefault(require("../core/endpoints"));
const validator = __importStar(require("validator"));
const firebase_user_1 = require("../models/firebase-user");
function getProfile(apiKey, token, callback) {
    if (token.trim().length === 0) {
        callback(utils.invalidArgumentError('Token'));
        return;
    }
    const payload = { idToken: token };
    endpoints_1.default.post(endpoints_1.default.urls(apiKey).accountInfoUrl, payload)
        .then((result) => {
        const users = result.users.map((firebaseUserResult) => new firebase_user_1.UserProfile(firebaseUserResult));
        callback(null, users);
    })
        .catch((err) => {
        callback(utils.processFirebaseError(err));
    });
}
exports.getProfile = getProfile;
function updateProfile(apiKey, token, name, ...more) {
    let photoUrl;
    let callback;
    if (more.length === 1) {
        // expect callback
        callback = more[0];
    }
    else if (more.length === 2) {
        photoUrl = more[0];
        callback = more[1];
    }
    if (typeof (callback) !== 'function') {
        throw new Error('No valid callback function defined');
    }
    if (token.trim().length === 0) {
        callback(utils.invalidArgumentError('Token'));
        return;
    }
    if (!validator.isLength(name, { min: 2 })) {
        callback(utils.invalidArgumentError('Name'));
        return;
    }
    if (photoUrl && !validator.isURL(photoUrl)) {
        callback(utils.invalidArgumentError('Photo Url. Not a valid URL'));
        return;
    }
    const payload = {
        idToken: token,
        displayName: name,
        returnSecureToken: true
    };
    if (photoUrl)
        payload.photoUrl = photoUrl;
    endpoints_1.default.post(endpoints_1.default.urls(apiKey).updateAccountInfoUrl, payload)
        .then((updatedUserInfo) => callback(null, new firebase_user_1.UserProfile(updatedUserInfo)))
        .catch((err) => utils.processFirebaseError(err));
}
exports.updateProfile = updateProfile;
function refreshToken(apiKey, refreshToken, callback) {
    if (refreshToken.trim().length === 0) {
        callback(utils.invalidArgumentError('Refresh Token'));
        return;
    }
    const payload = {
        refreshToken: refreshToken,
        grant_type: "refresh_token"
    };
    const refreshTokenEndpoint = endpoints_1.default.urls(apiKey).refreshTokenUrl;
    endpoints_1.default.post(refreshTokenEndpoint, payload)
        .then((userInfo) => callback(null, utils.processBasicFirebaseAuthResult(userInfo)))
        .catch((err) => callback(utils.processFirebaseError(err)));
}
exports.refreshToken = refreshToken;
//# sourceMappingURL=account.js.map