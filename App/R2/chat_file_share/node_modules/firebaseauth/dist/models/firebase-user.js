"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class FirebaseUser {
    constructor(firebaseAuthResult) {
        this.email = firebaseAuthResult.email;
        this.displayName = firebaseAuthResult.displayName || "";
        this.photoUrl = firebaseAuthResult.photoUrl || "";
        this.id = firebaseAuthResult.localId || firebaseAuthResult.user_id || firebaseAuthResult.uid;
        this.newUser = (firebaseAuthResult.registered === false);
        this.authenticatedWith = "password";
    }
}
exports.FirebaseUser = FirebaseUser;
class SocialUser extends FirebaseUser {
    constructor(firebaseAuthResult) {
        super(firebaseAuthResult);
        this.emailVerified = firebaseAuthResult.emailVerified;
        this.photoUrl = firebaseAuthResult.photoUrl;
        this.authenticatedWith = firebaseAuthResult.providerId;
        this.socialProfileUrl = firebaseAuthResult.federatedId;
        this.sameCredentialExists = firebaseAuthResult.needConfirmation;
        this.rawUserInfo = firebaseAuthResult.rawUserInfo;
    }
}
exports.SocialUser = SocialUser;
class UserProfile extends FirebaseUser {
    constructor(firebaseUserInfo) {
        super(firebaseUserInfo);
        this.emailVerified = firebaseUserInfo.emailVerified;
        this.photoUrl = firebaseUserInfo.photoUrl || firebaseUserInfo.photoURL;
        this.accountDisabled = (firebaseUserInfo.disabled === true);
        const providers = firebaseUserInfo.providerUserInfo || firebaseUserInfo.providerData;
        if (providers) {
            this.profileUrls = providers.map((provider) => {
                return {
                    authenticatedWith: provider.providerId,
                    profileUrl: provider.federatedId
                };
            });
        }
    }
}
exports.UserProfile = UserProfile;
//# sourceMappingURL=firebase-user.js.map