"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
}
Object.defineProperty(exports, "__esModule", { value: true });
const admin = __importStar(require("firebase-admin"));
const firebase_user_1 = require("../models/firebase-user");
const ERROR_NO_TOKEN = "ERROR_NO_TOKEN";
const ERROR_INVALID_TOKEN = "ERROR_INVALID_TOKEN";
const ERROR_RETRIEVE_USER_INFO = "ERROR_RETRIEVE_USER_INFO";
class Guard {
    constructor(serviceAccount, optionsOrCallback, callback) {
        this.middleware = (req, res, next) => {
            const token = req.headers[this.options.tokenField] || req.body[this.options.tokenField] || req.query[this.options.tokenField];
            if (!token) {
                this.callback ? this.callback(req, res, next, ERROR_NO_TOKEN) : res.status(401).json({ error: "No token provided" });
                return;
            }
            admin.auth().verifyIdToken(token)
                .then((decodedToken) => {
                const info = {
                    id: decodedToken.uid,
                    token: token
                };
                if (this.options.userIdOnly) {
                    if (this.callback) {
                        this.callback(req, res, next, undefined, info);
                    }
                    else {
                        req.user = info;
                        next();
                    }
                }
                else {
                    this.fetchUserInfo(info.id, token, req, res, next);
                }
            })
                .catch((error) => {
                if (this.callback) {
                    this.callback(req, res, next, ERROR_INVALID_TOKEN);
                }
                else {
                    res.status(401).json({
                        message: "Unauthorized",
                        error: error
                    });
                }
            });
        };
        this.fetchUserInfo = (userId, token, req, res, next) => {
            admin.auth().getUser(userId)
                .then(function (userRecord) {
                const userInfo = new firebase_user_1.UserProfile(userRecord.toJSON());
                userInfo.token = token;
                if (this.callback) {
                    this.callback(req, res, next, undefined, userInfo);
                }
                else {
                    req.user = userInfo;
                    next();
                }
            })
                .catch(function (error) {
                if (this.callback) {
                    this.callback(req, res, next, ERROR_RETRIEVE_USER_INFO, { userId: userId, error: error });
                }
                else {
                    res.status(401).json({ error: "An error occurred while trying to load your account info" });
                }
            });
        };
        if (typeof (serviceAccount) !== 'object'
            || typeof (serviceAccount.type) !== 'string'
            || serviceAccount.type !== 'service_account') {
            throw new Error('serviceAccount is not a firebase service account credential json object');
        }
        admin.initializeApp({
            credential: admin.credential.cert(serviceAccount)
        });
        if (!callback && optionsOrCallback instanceof Function) {
            this.callback = optionsOrCallback;
        }
        else if (optionsOrCallback instanceof Object) {
            this.options = optionsOrCallback;
        }
        if (!!callback) {
            this.callback = callback;
        }
        if (!this.options) {
            this.options = {
                tokenField: "token",
                userIdOnly: true
            };
        }
    }
}
exports.Guard = Guard;
//# sourceMappingURL=guard.js.map