"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
}
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
}
Object.defineProperty(exports, "__esModule", { value: true });
const utils = __importStar(require("../core/utils"));
const endpoints_1 = __importDefault(require("../core/endpoints"));
const ids = {
    Facebook: "facebook.com",
    Google: "google.com",
    Github: "github.com",
    Twitter: "twitter.com"
};
function loginWithProviderID(apiKey, providerToken, providerId, callback) {
    if (providerToken.trim().length === 0) {
        callback(utils.invalidArgumentError('providerToken'));
        return;
    }
    const payload = {
        postBody: "access_token=" + providerToken + "&providerId=" + providerId,
        requestUri: "http://localhost",
        returnSecureToken: true,
        returnIdpCredential: true
    };
    endpoints_1.default.post(endpoints_1.default.urls(apiKey).socialIdentityUrl, payload)
        .then((userInfo) => callback(null, utils.processFirebaseAuthResult(userInfo)))
        .catch((err) => callback(utils.processFirebaseError(err)));
}
function linkWithProviderID(apiKey, idToken, providerToken, providerId, callback) {
    if (providerToken.trim().length === 0) {
        callback(utils.invalidArgumentError('providerToken'));
        return;
    }
    const payload = {
        idToken: idToken,
        postBody: "access_token=" + providerToken + "&providerId=" + providerId,
        requestUri: "http://localhost",
        returnSecureToken: true,
        returnIdpCredential: true
    };
    endpoints_1.default.post(endpoints_1.default.urls(apiKey).socialIdentityUrl, payload)
        .then((userInfo) => callback(null, utils.processFirebaseAuthResult(userInfo)))
        .catch((err) => callback(utils.processFirebaseError(err)));
}
function loginWithFacebook(apiKey, providerToken, callback) {
    loginWithProviderID(apiKey, providerToken, ids.Facebook, callback);
}
exports.loginWithFacebook = loginWithFacebook;
function loginWithGoogle(apiKey, providerToken, callback) {
    loginWithProviderID(apiKey, providerToken, ids.Google, callback);
}
exports.loginWithGoogle = loginWithGoogle;
function loginWithGithub(apiKey, providerToken, callback) {
    loginWithProviderID(apiKey, providerToken, ids.Github, callback);
}
exports.loginWithGithub = loginWithGithub;
function loginWithTwitter(apiKey, providerToken, callback) {
    loginWithProviderID(apiKey, providerToken, ids.Twitter, callback);
}
exports.loginWithTwitter = loginWithTwitter;
function linkWithFacebook(apiKey, idToken, providerToken, callback) {
    linkWithProviderID(apiKey, idToken, providerToken, ids.Facebook, callback);
}
exports.linkWithFacebook = linkWithFacebook;
function linkWithGoogle(apiKey, idToken, providerToken, callback) {
    linkWithProviderID(apiKey, idToken, providerToken, ids.Google, callback);
}
exports.linkWithGoogle = linkWithGoogle;
function linkWithGithub(apiKey, idToken, providerToken, callback) {
    linkWithProviderID(apiKey, idToken, providerToken, ids.Github, callback);
}
exports.linkWithGithub = linkWithGithub;
function linkWithTwitter(apiKey, idToken, providerToken, callback) {
    linkWithProviderID(apiKey, idToken, providerToken, ids.Twitter, callback);
}
exports.linkWithTwitter = linkWithTwitter;
//# sourceMappingURL=social-providers.js.map