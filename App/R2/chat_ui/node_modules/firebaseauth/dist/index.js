"use strict";
/// <reference path="./types/express.d.ts" />
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
}
const emailPasswordProvider = __importStar(require("./providers/email-password-provider"));
const socialProviders = __importStar(require("./providers/social-providers"));
const account = __importStar(require("./user/account"));
const guard_1 = require("./middlewares/guard");
class FirebaseAuth {
    constructor(apiKey) {
        this.apiKey = apiKey;
    }
    static initTokenMiddleware(serviceAccount, optionsOrCallback, callback) {
        return new guard_1.Guard(serviceAccount, optionsOrCallback, callback).middleware;
    }
    signInWithEmail(email, password, callback) {
        emailPasswordProvider.signIn(this.apiKey, email, password, callback);
    }
    sendVerificationEmail(token, callback) {
        emailPasswordProvider.sendVerificationEmail(this.apiKey, token, callback);
    }
    verifyEmail(oobcode, callback) {
        emailPasswordProvider.verifyEmail(this.apiKey, oobcode, callback);
    }
    sendPasswordResetEmail(email, callback) {
        emailPasswordProvider.sendPasswordResetEmail(this.apiKey, email, callback);
    }
    verifyPasswordResetcode(oobcode, callback) {
        emailPasswordProvider.verifyPasswordResetCode(this.apiKey, oobcode, callback);
    }
    resetPassword(oobcode, newPassword, callback) {
        emailPasswordProvider.resetPassword(this.apiKey, oobcode, newPassword, callback);
    }
    changePassword(token, password, callback) {
        emailPasswordProvider.changePassword(this.apiKey, token, password, callback);
    }
    getProfile(token, callback) {
        account.getProfile(this.apiKey, token, callback);
    }
    updateProfile(token, name, photoUrl, callback) {
        account.updateProfile(this.apiKey, token, name, photoUrl, callback);
    }
    refreshToken(refreshToken, callback) {
        account.refreshToken(this.apiKey, refreshToken, callback);
    }
    registerWithEmail(email, password, extras, callback) {
        emailPasswordProvider.register(this.apiKey, email, password, extras, callback);
    }
    loginWithFacebook(providerToken, callback) {
        socialProviders.loginWithFacebook(this.apiKey, providerToken, callback);
    }
    linkWithFacebook(idToken, providerToken, callback) {
        socialProviders.linkWithFacebook(this.apiKey, idToken, providerToken, callback);
    }
    loginWithGoogle(providerToken, callback) {
        socialProviders.loginWithGoogle(this.apiKey, providerToken, callback);
    }
    linkWithGoogle(idToken, providerToken, callback) {
        socialProviders.linkWithGoogle(this.apiKey, idToken, providerToken, callback);
    }
    loginWithGithub(providerToken, callback) {
        socialProviders.loginWithGithub(this.apiKey, providerToken, callback);
    }
    linkWithGithub(idToken, providerToken, callback) {
        socialProviders.linkWithGithub(this.apiKey, idToken, providerToken, callback);
    }
    loginWithTwitter(providerToken, callback) {
        socialProviders.loginWithTwitter(this.apiKey, providerToken, callback);
    }
    linkWithTwitter(idToken, providerToken, callback) {
        socialProviders.linkWithTwitter(this.apiKey, idToken, providerToken, callback);
    }
}
module.exports = FirebaseAuth;
//# sourceMappingURL=index.js.map